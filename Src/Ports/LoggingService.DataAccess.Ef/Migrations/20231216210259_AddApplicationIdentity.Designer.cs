// <auto-generated />
using System;
using System.Collections.Generic;
using LoggingService.DataAccess.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoggingService.DataAccess.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231216210259_AddApplicationIdentity")]
    partial class AddApplicationIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LoggingService.Application.Authentication.Application.ApplicationIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("LoggingService.Domain.Features.EventCollections.EventCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("EventCollections");
                });

            modelBuilder.Entity("LoggingService.Domain.Features.LogEvents.LogEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Args")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LogLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("LogEvents");
                });

            modelBuilder.Entity("LoggingService.Application.Authentication.Application.ApplicationIdentity", b =>
                {
                    b.OwnsOne("LoggingService.Application.Authentication.Application.ApiKey", "ApiKey", b1 =>
                        {
                            b1.Property<Guid>("ApplicationIdentityId")
                                .HasColumnType("uuid");

                            b1.Property<byte[]>("ApiKeyHash")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("ApiKeyPrefix")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpireAtUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("ApplicationIdentityId");

                            b1.ToTable("Applications");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationIdentityId");
                        });

                    b.Navigation("ApiKey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
